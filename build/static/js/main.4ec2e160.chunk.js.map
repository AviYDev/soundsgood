{"version":3,"sources":["Container/Ranking.js","Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","state","songs","handleAdd","bind","i","newItems","this","slice","splice","setState","push","fetch","method","headers","then","res","json","data","console","log","items","map","item","CSSTransition","appear","timeout","enter","exit","classNames","key","className","order","onClick","handleRemove","song_title","artist","TransitionGroup","transition","Component","valid","load","selected","column","toDisplay","validate","getSongs","csvjson","spotify","override","css","isLoad","Ranking","TableContainer","Table","TableBody","row","TableRow","hover","role","tabIndex","id","TableCell","padding","Checkbox","value","inputProps","component","scope","align","size","color","loading","App","launch","connexion","isLaunched","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kx2lBA0FeA,E,kDAhFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,EAAKF,MAAME,OAEtB,EAAKC,UAAW,EAAKA,UAAUC,KAAf,gBALD,E,sGAaNC,GACT,IAAIC,EAAWC,KAAKN,MAAMC,MAAMM,QAChCF,EAASG,OAAOJ,EAAG,GACnBE,KAAKG,SAAS,CAACR,MAAOI,M,kCAItB,IAAIA,EAAWC,KAAKN,MAAMC,MAG1BI,EAASK,KAAK,CACV,MAAS,QACT,OAAU,UACV,MAAS,MAIbJ,KAAKG,SAAS,CAACR,MAAOI,M,iCAGf,IAAD,OACNM,MAAM,iCAAiC,CACnCC,OAAQ,MACRC,QAAS,CACL,OAAU,mBACV,eAAgB,sBAGnBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACHC,QAAQC,IAAIF,EAAKhB,OACjB,EAAKQ,SAAS,CAACR,MAAQgB,EAAKhB,a,+BAI9B,IAAD,OAKCmB,EAAQd,KAAKN,MAAMC,MAAMoB,KAAI,SAACC,EAAMlB,GAAP,OAC/B,kBAACmB,EAAA,EAAD,CAAeC,QAAM,EAACC,QAAS,CAACD,OAAO,IAAIE,MAAM,IAAIC,KAAK,KAAOC,WAAW,WAAWC,IAAKzB,GAC5F,yBAAM0B,UAAW,OAAQD,IAAKP,EAAKS,MAAQC,QAAS,kBAAM,EAAKC,aAAa7B,KACvEkB,EAAKY,WADV,OAC0BZ,EAAKa,YAMnC,OAGI,6BAEI,4BAAQH,QAAS1B,KAAKJ,WAAtB,YACR,kBAACkC,EAAA,EAAD,CAGAC,WAAY,WACPjB,Q,GAzEWkB,a,kOCqKTxC,E,kDAtJX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,GACPsC,OAAQ,EACRC,MAAO,EACPC,SAAU,GACVC,OAAO,GACPzB,KAAK,GACL0B,UAAU,IAEd,EAAKC,SAAW,EAAKA,SAASzC,KAAd,gBAXD,E,gEAgBXG,KAAKuC,a,iCAMF,IAAD,OACNlC,MAAM,iCAAiC,CACnCC,OAAQ,MACRC,QAAS,CACL,OAAU,mBACV,eAAgB,sBAGnBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACHA,EAAO6B,EAAQC,QACf,EAAKtC,SAAS,CAACR,MAAQgB,IACvB,EAAKR,SAAS,CAACkC,UAAY1B,IAI3BC,QAAQC,IAAI,EAAKnB,MAAM0C,QAGvB,EAAKjC,SAAS,CAAC+B,MAAM,S,iCAyB7BlC,KAAKG,SAAS,CAAC8B,OAAQjC,KAAKN,MAAMuC,U,+BAIlC,IAAMS,EAAWC,cAAH,KAKRC,EAAU5C,KAAKN,MAAMwC,KACvB,OAAIlC,KAAKN,MAAMuC,MACH,kBAACY,EAAD,CAASlD,MAAOK,KAAKN,MAAMC,QAG/B,6BAKUiD,EACE,yBAAKpB,UAAW,SAChB,yBAAKA,UAAW,WAAhB,cAEA,kBAACsB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,KACKhD,KAAKN,MAAM2C,UAAUtB,KAAI,SAACkC,GAAD,OACtB,kBAACC,EAAA,EAAD,CAAcC,OAAK,EAELC,KAAK,WACLC,UAAW,EACX9B,IAAK0B,EAAIK,IACd,kBAACC,EAAA,EAAD,CAAWC,QAAQ,YACxB,kBAACC,EAAA,EAAD,CACIC,MAAOT,EAAIK,GACXK,WAAY,CAAE,aAAcV,EAAIrB,eAGpC,kBAAC2B,EAAA,EAAD,CAAYK,UAAU,KAAKC,MAAM,OAC5BZ,EAAIrB,YAET,kBAAC2B,EAAA,EAAD,aAAYO,MAAM,SAAlB,QAA+B,SAASb,EAAIpB,eAQ5D,4BAAQL,UAAW,iBAAkBE,QAAS1B,KAAKsC,UAAnD,cAaJ,yBAAKd,UAAU,iBACX,kBAAC,IAAD,CACImB,IAAKD,EACLqB,KAAM,IACNC,MAAO,UACPC,QAASjE,KAAKN,MAAMuE,gB,GAxIpCjC,aCcTkC,E,kDA/BX,WAAYzE,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTyE,QAAS,GAEb,EAAKC,UAAY,EAAKA,UAAUvE,KAAf,gBALF,E,wDAQfG,KAAKG,SAAS,CAACgE,QAASnE,KAAKN,MAAMyE,W,+BAKnC,IAAME,EAAcrE,KAAKN,MAAMyE,OAC/B,OACI,yBAAK3C,UAAU,OAEP6C,EACM,kBAAC,EAAD,MACA,yBAAK7C,UAAW,WAAW,4BAAQA,UAAW,iBAAkBE,QAAS1B,KAAKoE,WAAnD,SAIzB,uBAAG5C,UAAW,UAAd,oE,GAzBVQ,aCSZsC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTrE,MAAK,SAAA0E,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1F,QACfqF,UAAUC,cAAcO,YAI1B3E,QAAQC,IACN,iHAKEiE,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBtE,QAAQC,IAAI,sCAGRiE,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACL/E,QAAQ+E,MAAM,4CAA6CA,MCzFjEC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDanB,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,GAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtCzE,MAAMwE,EAAO,CACXtE,QAAS,CAAE,iBAAkB,YAE5BC,MAAK,SAAA6F,GAEJ,IAAMC,EAAcD,EAAS9F,QAAQgG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMlG,MAAK,SAAA0E,GACjCA,EAAayB,aAAanG,MAAK,WAC7BgE,OAAOC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1BY,OAAM,WACL9E,QAAQC,IACN,oEAvFAgG,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMlG,MAAK,WACjCI,QAAQC,IACN,iHAMJ+D,EAAgBC,EAAOC,OCnC/BE,K","file":"static/js/main.4ec2e160.chunk.js","sourcesContent":["import React, {\n    Component,\n} from 'react';\nimport \"./Container.css\";\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\n\n\n\n\nclass Container extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            songs: this.props.songs,\n        }\n        this.handleAdd= this.handleAdd.bind(this);\n\n    }\n\n    componentDidMount() {\n           // this.getSongs();\n    }\n\n    handleRemove(i) {\n        let newItems = this.state.songs.slice();\n        newItems.splice(i, 1);\n        this.setState({songs: newItems});\n    }\n\n    handleAdd() {\n        let newItems = this.state.songs;\n\n\n        newItems.push({\n            \"title\": \"Title\",\n            \"artist\": \"artiste\",\n            \"order\": \"0\"\n        })\n\n\n        this.setState({songs: newItems});\n    }\n\n    getSongs(){\n        fetch('http://localhost:3001/spotify/',{\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => res.json())\n            .then((data) => {\n                console.log(data.songs)\n                this.setState({songs : data.songs});\n            })\n\n    }\n    render() {\n\n\n\n\n        const items = this.state.songs.map((item, i) => (\n            <CSSTransition appear timeout={{appear:500,enter:200,exit:1000}} classNames=\"pagefade\" key={i}>\n            <div  className={\"elem\"} key={item.order}  onClick={() => this.handleRemove(i)}>\n                {item.song_title} by {item.artist}\n            </div>\n    </CSSTransition>\n            // return container;\n        ));\n      //  console.log(this.state.songs);\n        return(\n\n\n            <div>\n\n                <button onClick={this.handleAdd}>Add Song</button>\n        <TransitionGroup\n\n\n        transition={\"TopList\"}>\n            {items}\n        </TransitionGroup>\n            </div>\n    );\n    }\n}\n\n\nexport default Container;","import React, {\n    Component,\n} from 'react';\nimport \"./Container.css\";\nimport  Ranking from './Ranking';\nimport csvjson from \"../csvjson.json\";\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\n\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\nimport { css } from \"@emotion/core\";\n\n\n\n\nclass Container extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            songs: [],\n            valid : false,\n            load : false,\n            selected: \"\",\n            column:[],\n            data:[],\n            toDisplay:[],\n        }\n        this.validate = this.validate.bind(this);\n\n    }\n\n    componentDidMount() {\n            this.getSongs();\n    }\n\n\n\n\n    getSongs(){\n        fetch('http://localhost:3002/spotify/',{\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => res.json())\n            .then((data) => {\n                data = csvjson.spotify;\n                this.setState({songs : data});\n                this.setState({toDisplay : data});\n\n\n\n                console.log(this.state.column);\n\n\n                this.setState({load: true});\n               /* for (const property in this.state.songs ) {\n                    let newItems = this.state.data;\n\n                    newItems.push({\n                        id : property.id,\n                        title: property.song_title,\n                        artist: property.artist,\n\n                    })\n\n                    //console.log(newItems);\n                    this.setState({data: newItems});\n\n                }*/\n\n\n\n\n                })\n\n    }\n\n\n    validate() {\n        this.setState({valid: !this.state.valid});\n    }\n\n    render() {\n        const override = css`\n  margin: auto;\n  position: absolute;\n  border-color: red;\n`;\n        const isLoad =  this.state.load;\n            if (this.state.valid) {\n                return (<Ranking songs={this.state.songs}/>);\n            } else {\n                return (\n                    <div>\n\n\n\n\n                            { isLoad ?\n                                <div className={\"Table\"}>\n                                <div className={\"fade-in\"}>\n                                    Song search\n                                <TableContainer >\n                                    <Table >\n\n                                        <TableBody>\n                                            {this.state.toDisplay.map((row) => (\n                                                <TableRow     hover\n\n                                                              role=\"checkbox\"\n                                                              tabIndex={-1}\n                                                              key={row.id}\n                                                        ><TableCell padding=\"checkbox\">\n                                                    <Checkbox\n                                                        value={row.id}\n                                                        inputProps={{ 'aria-label': row.song_title }}\n                                                    />\n                                                </TableCell>\n                                                    <TableCell  component=\"th\" scope=\"row\">\n                                                        {row.song_title}\n                                                    </TableCell>\n                                                    <TableCell  align=\"right\"align=\"right\">{row.artist}</TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n\n\n                                    <button className={'landing-button'} onClick={this.validate}>\n                                       Validate\n                                    </button>\n                                </div>\n                                </div>\n\n                       //             <MaterialTable\n                         //               title=\"Editable Example\"\n                           //             columns={this.state.column}\n                             //           data={this.state.data}\n\n                               //     />\n                                :\n                                <div className=\"sweet-loading\">\n                                    <ScaleLoader\n                                        css={override}\n                                        size={300}\n                                        color={\"#ffffff\"}\n                                        loading={this.state.loading}\n                                    />\n                                </div>\n                            }\n\n\n                    </div>\n                );\n            }\n        };\n\n}\n\n/*   <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\"/>\n                        <Button variant=\"outline-warning\">Search</Button>*/\n\nexport default Container;\n\n\n/*      <header className=\"App-header\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    </header>*/","import React, {Component} from 'react';\nimport './App.css';\nimport  Container from './Container/Container';\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            launch : false,\n        }\n        this.connexion = this.connexion.bind(this);\n    }\n    connexion() {\n        this.setState({launch: !this.state.launch});\n    }\n\n    render() {\n\n        const isLaunched =  this.state.launch;\n        return (\n            <div className=\"App\">\n                {\n                    isLaunched\n                        ? <Container/>\n                        : <div className={\"landing\"}><button className={'landing-button'} onClick={this.connexion}>\n                            ENTER\n                        </button>\n\n                            <p className={\"author\"}>Avinash Yoganandan&nbsp;&nbsp;Issam Tebib&nbsp;&nbsp;Iman ElAzhari</p>\n                        </div>\n                }\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}