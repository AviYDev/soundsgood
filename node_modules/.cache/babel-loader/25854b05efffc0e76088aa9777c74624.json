{"ast":null,"code":"var _jsxFileName = \"/home/avix/Documents/ECE/MachineLearning/songs-prediction/songs-prediction-front/src/Container/Container.js\";\nimport React, { Component } from 'react';\nimport \"./Container.css\";\nimport Ranking from './Ranking';\nimport csvjson from \"../csvjson.json\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\nimport { css } from \"@emotion/core\";\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      songs: [],\n      valid: false,\n      load: false,\n      selected: \"\",\n      column: [],\n      data: [],\n      toDisplay: []\n    };\n    this.validate = this.validate.bind(this);\n  }\n\n  componentDidMount() {\n    this.getSongs();\n  }\n\n  getSongs() {\n    fetch('http://localhost:3002/spotify/', {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      data = csvjson.spotify;\n      this.setState({\n        songs: data\n      });\n      this.setState({\n        toDisplay: data\n      });\n      console.log(this.state.column);\n      this.setState({\n        load: true\n      });\n      /* for (const property in this.state.songs ) {\n           let newItems = this.state.data;\n            newItems.push({\n               id : property.id,\n               title: property.song_title,\n               artist: property.artist,\n            })\n            //console.log(newItems);\n           this.setState({data: newItems});\n        }*/\n    });\n  }\n\n  validate() {\n    this.setState({\n      valid: !this.state.valid\n    });\n  }\n\n  render() {\n    const override = css`\n  margin: auto;\n  position: absolute;\n  border-color: red;\n`;\n    const isLoad = this.state.load;\n\n    if (this.state.valid) {\n      return /*#__PURE__*/React.createElement(Ranking, {\n        songs: this.state.songs,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      }, isLoad ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"fade-in\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 33\n        }\n      }, \"Song search\", /*#__PURE__*/React.createElement(TableContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 41\n        }\n      }, this.state.toDisplay.map(row => /*#__PURE__*/React.createElement(TableRow, {\n        hover: true,\n        role: \"checkbox\",\n        tabIndex: -1,\n        key: row.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        padding: \"checkbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 58\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        value: row.id,\n        inputProps: {\n          'aria-label': row.song_title\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(TableCell, {\n        component: \"th\",\n        scope: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 53\n        }\n      }, row.song_title), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"right\",\n        align: \"right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 53\n        }\n      }, row.artist)))))), /*#__PURE__*/React.createElement(\"button\", {\n        className: 'landing-button',\n        onClick: this.validate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 37\n        }\n      }, \"Validate\"))) //             <MaterialTable\n      //               title=\"Editable Example\"\n      //             columns={this.state.column}\n      //           data={this.state.data}\n      //     />\n      :\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        className: \"sweet-loading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(ScaleLoader, {\n        css: override,\n        size: 300,\n        color: \"#ffffff\",\n        loading: this.state.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 37\n        }\n      })));\n    }\n  }\n\n}\n/*   <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\"/>\n                        <Button variant=\"outline-warning\">Search</Button>*/\n\n\nexport default Container;\n/*      <header className=\"App-header\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    </header>*/","map":{"version":3,"sources":["/home/avix/Documents/ECE/MachineLearning/songs-prediction/songs-prediction-front/src/Container/Container.js"],"names":["React","Component","Ranking","csvjson","Table","TableBody","TableCell","TableContainer","TableRow","Checkbox","ScaleLoader","css","Container","constructor","props","state","songs","valid","load","selected","column","data","toDisplay","validate","bind","componentDidMount","getSongs","fetch","method","headers","then","res","json","spotify","setState","console","log","render","override","isLoad","map","row","id","song_title","artist","loading"],"mappings":"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","sourcesContent":["import React, {\n    Component,\n} from 'react';\nimport \"./Container.css\";\nimport  Ranking from './Ranking';\nimport csvjson from \"../csvjson.json\";\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\n\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\nimport { css } from \"@emotion/core\";\n\n\n\n\nclass Container extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            songs: [],\n            valid : false,\n            load : false,\n            selected: \"\",\n            column:[],\n            data:[],\n            toDisplay:[],\n        }\n        this.validate = this.validate.bind(this);\n\n    }\n\n    componentDidMount() {\n            this.getSongs();\n    }\n\n\n\n\n    getSongs(){\n        fetch('http://localhost:3002/spotify/',{\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => res.json())\n            .then((data) => {\n                data = csvjson.spotify;\n                this.setState({songs : data});\n                this.setState({toDisplay : data});\n\n\n\n                console.log(this.state.column);\n\n\n                this.setState({load: true});\n               /* for (const property in this.state.songs ) {\n                    let newItems = this.state.data;\n\n                    newItems.push({\n                        id : property.id,\n                        title: property.song_title,\n                        artist: property.artist,\n\n                    })\n\n                    //console.log(newItems);\n                    this.setState({data: newItems});\n\n                }*/\n\n\n\n\n                })\n\n    }\n\n\n    validate() {\n        this.setState({valid: !this.state.valid});\n    }\n\n    render() {\n        const override = css`\n  margin: auto;\n  position: absolute;\n  border-color: red;\n`;\n        const isLoad =  this.state.load;\n            if (this.state.valid) {\n                return (<Ranking songs={this.state.songs}/>);\n            } else {\n                return (\n                    <div>\n\n\n\n\n                            { isLoad ?\n                                <div className={\"Table\"}>\n                                <div className={\"fade-in\"}>\n                                    Song search\n                                <TableContainer >\n                                    <Table >\n\n                                        <TableBody>\n                                            {this.state.toDisplay.map((row) => (\n                                                <TableRow     hover\n\n                                                              role=\"checkbox\"\n                                                              tabIndex={-1}\n                                                              key={row.id}\n                                                        ><TableCell padding=\"checkbox\">\n                                                    <Checkbox\n                                                        value={row.id}\n                                                        inputProps={{ 'aria-label': row.song_title }}\n                                                    />\n                                                </TableCell>\n                                                    <TableCell  component=\"th\" scope=\"row\">\n                                                        {row.song_title}\n                                                    </TableCell>\n                                                    <TableCell  align=\"right\"align=\"right\">{row.artist}</TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n\n\n                                    <button className={'landing-button'} onClick={this.validate}>\n                                       Validate\n                                    </button>\n                                </div>\n                                </div>\n\n                       //             <MaterialTable\n                         //               title=\"Editable Example\"\n                           //             columns={this.state.column}\n                             //           data={this.state.data}\n\n                               //     />\n                                :\n                                <div className=\"sweet-loading\">\n                                    <ScaleLoader\n                                        css={override}\n                                        size={300}\n                                        color={\"#ffffff\"}\n                                        loading={this.state.loading}\n                                    />\n                                </div>\n                            }\n\n\n                    </div>\n                );\n            }\n        };\n\n}\n\n/*   <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\"/>\n                        <Button variant=\"outline-warning\">Search</Button>*/\n\nexport default Container;\n\n\n/*      <header className=\"App-header\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    </header>*/"]},"metadata":{},"sourceType":"module"}